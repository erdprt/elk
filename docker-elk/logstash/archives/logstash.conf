input {
	tcp {
    type => "tcp_type_mutate_5000"  
		port => 5000
    codec => json
	}
  
	tcp {
    type => "tcp_type_grok_5050"  
		port => 5050
    codec => json
	}
  
	tcp {
    type => "tcp_type_grok_coord_5100"  
		port => 5100
    codec => json
	}  
  

	syslog {
    type => "syslog_type_mutate_5150"  
		port => 5150
    codec => json
	}
  
 	tcp {
    type => "tcp_type_grok_5200"  
		port => 5200
    codec => json
	}     
   
  
  
}

## Add your filters / logstash plugins configuration here

filter {   
 
 if [type] == "tcp_type_mutate_5000" {
  csv   {  
    columns => [  
       "datetime_of_record",
       "fistName",
       "lastName",
       "age"
    ]
    separator => "," 
  } 
  date { 
    match => ["datetime_of_record","yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
  }
  mutate{convert => {"fistName" => "string"}}
  mutate{convert => {"lastName" => "string"}}
  mutate{convert => {"age" => "integer"}}
  }
  
 if [type] == "tcp_type_grok_5050" {
    grok {
      match => {"message" => "%{DATA:@datetime_of_record},%{DATA:firstName},%{DATA:lastName},%{NUMBER:age}"}
      overwrite => ["message"]
      remove_tag => ["_grokparsefailure"]
      add_tag => ["SUCCESS"]
    }
    mutate{convert => {"firstName" => "string"}}
    mutate{convert => {"lastName" => "string"}}
    mutate{convert => {"age" => "integer"}}
  }
  
 if [type] == "tcp_type_grok_coord_5100" {
    grok {
      match => {"message" => "%{DATA:@datetime_of_record} %{DATA:method} %{IP:remoteIP} %{DATA:path} %{DATA:code}"}
      overwrite => ["message"]
      remove_tag => ["_grokparsefailure"]
      add_tag => ["SUCCESS"]
    }
    geoip {
      source => "remoteIP"
      target => "geoip"
      database => "/usr/share/logstash/geoip/GeoLite2-City.mmdb"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    } 
    mutate{convert => {"[geoip][coordinates]" => "float"}}  
    mutate{convert => {"method" => "string"}}  
    mutate{convert => {"remoteIP" => "string"}}   
    mutate{convert => {"path" => "string"}}    
    mutate{convert => {"code" => "string"}}
  }  
  
  
 if [type] == "syslog_type_mutate_5150" {
  csv   {  
    columns => [  
       "datetime_of_record",
       "fistName",
       "lastName",
       "age"
    ]
    separator => "," 
  } 
    date { 
      match => ["datetime_of_record","yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
  }
    mutate{convert => {"fistName" => "string"}}
    mutate{convert => {"lastName" => "string"}}
    mutate{convert => {"age" => "integer"}}
  }
  
 if [type] == "tcp_type_grok_5200" {
    grok {
      match => {"message" => "%{DATA:@datetime_of_record} %{DATA:method} %{DATA:remoteIP} %{DATA:path} %{DATA:code} "}
      overwrite => ["message"]
      remove_tag => ["_grokparsefailure"]
      add_tag => ["SUCCESS"]
    }
    mutate{convert => {"method" => "string"}}  
    mutate{convert => {"remoteIP" => "string"}}   
    mutate{convert => {"path" => "string"}}    
    mutate{convert => {"code" => "string"}}
  }  

}

output {
  if [type] == "tcp_type_mutate_5000" {
   elasticsearch {
           hosts=> "elasticsearch:9200"
           index => "tcp_type_mutate_5000-%{+YYYY.MM.dd}"
   }                                     
  }
  else if [type] == "tcp_type_grok_5050" {
   elasticsearch {
           hosts=> "elasticsearch:9200"
           index => "tcp_type_grok_5050-%{+YYYY.MM.dd}"
   }                                     
  }
  else if [type] == "tcp_type_grok_coord_5100" {
   elasticsearch {
           hosts=> "elasticsearch:9200"
           index => "tcp_type_grok_coord_5100-%{+YYYY.MM.dd}"
   }                                     
  } 
  else if [type] == "syslog_type_mutate_5150" {
   elasticsearch {
           hosts=> "elasticsearch:9200"
           index => "syslog_type_mutate_5150-%{+YYYY.MM.dd}"
   }                                     
  }   
  else if [type] == "tcp_type_grok_5200" {
   elasticsearch {
           hosts=> "elasticsearch:9200"
           index => "tcp_type_grok_5200-%{+YYYY.MM.dd}"
   }                                     
  }

  
  stdout {}  
}
